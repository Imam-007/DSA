// Delete Middle Element from Stack.

package imam.stack;

import java.util.Scanner;
import java.util.Stack;

public class DeleteMiddleElementInStack {
	public static void deleteMiddleElement(Stack<Integer> stk,int count,int size) {
		if(count==size/2) {
			System.out.println("Middle Element in stack "+stk.pop());
			return;
		}
		int num=stk.pop();
		deleteMiddleElement(stk,count+1,size);
		stk.push(num);
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Stack<Integer> stk=new Stack<>();
		Scanner sc=new Scanner(System.in);
		System.out.println("How much element do want to insert in stack");
		int size=sc.nextInt();
		System.out.println("enter "+size+" element in stack");
		for(int i=0;i<size;i++) {
			stk.push(sc.nextInt());
		}
		System.out.println("Stack before operation"+ stk);
		deleteMiddleElement(stk,0,stk.size());
		System.out.println("Stack after operation"+ stk);

	}

}

***************************************************************************************************************************

// Insert Element at bottom in Stack.

package imam.stack;

import java.util.Scanner;
import java.util.Stack;

public class InsertElementAtBottomInStack {
	private static void insertBottomInStack(Stack<Integer> stk,int num) {
		if(stk.isEmpty()) {
			stk.push(num);
			return;
		}
		int val=stk.pop();
		insertBottomInStack( stk,num);
		stk.push(val);
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Stack<Integer> stk=new Stack<>();
		Scanner sc=new Scanner(System.in);
		System.out.println("How much element do want to insert in stack");
		int size=sc.nextInt();
		System.out.println("enter "+size+" element in stack");
		for(int i=0;i<size;i++) {
			stk.push(sc.nextInt());
		}
		System.out.println("Enter Element do you want to insert in Stack");
		int num=sc.nextInt();
		System.out.println("Stack before operation"+ stk);
		insertBottomInStack(stk,num);
		System.out.println("Stack after operation"+ stk);	

	}

}

*****************************************************************************************************************************

//Reverse a stack using Recursion.

package imam.stack;

import java.util.Scanner;
import java.util.Stack;

public class ReverseStackUsingRecursion {
	public static void reverseStack(Stack<Integer> stk) {
		if(stk.isEmpty()) {
			return;
		}
		int num=stk.pop();
		reverseStack(stk);
		insertInBottom(stk,num);
	}
	public static void insertInBottom(Stack<Integer> stk,int num) {
		if(stk.isEmpty()) {
			stk.push(num);
			return;
		}
		int temp=stk.pop();
		insertInBottom(stk,num);
		stk.push(temp);		
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Stack<Integer> stk=new Stack<>();
		Scanner sc=new Scanner(System.in);
		System.out.println("How much element do want to insert in stack");
		int size=sc.nextInt();
		System.out.println("enter "+size+" element in stack");
		for(int i=0;i<size;i++) {
			stk.push(sc.nextInt());
		}
		System.out.println("Stack before operation"+ stk);
		
		reverseStack(stk);
		
		System.out.println("Stack after operation"+ stk);

	}

}


*****************************************************************************************************************************

// Redundant Brackets/Extra Bracket

package imam.stack;

import java.util.Stack;

public class IsRedundantBrackets {
	public static boolean isRedundant(String str) {
		Stack<Character> stk=new Stack<>();
		
		for(char ch:str.toCharArray()) {
			if(ch=='(' || ch=='+' || ch=='-' || ch=='*' || ch=='/') {
				stk.push(ch);
			}else if(ch==')') {
				boolean flag=true;
				while(stk.peek()!='(') {
					stk.pop();
					flag=false;
				}
				if(flag) {
					return true;
				}
				stk.pop();
			}
		}
		
		return false;
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		String str="(a+c*b)+(c))";
		System.out.println(isRedundant(str));

	}
}

Sample Input 1 :
2
(a+b)
(a+c*b)+(c))
Sample Output 1 :
No
Yes

********************************************************************************************************************************


