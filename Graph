// Graph Creation

package imam.Graph;

import java.util.ArrayList;

public class GraphCreation {
	static class Edge{
		int src;
		int dst;
		int wt;
		public Edge(int s,int d,int w) {
			this.src=s;
			this.dst=d;
			this.wt=w;
		}
	}
	public static void create(ArrayList<Edge>[] graph) {
		for(int i=0;i<graph.length;i++) {
			graph[i]=new ArrayList<>();
		}
		
		//vertex-1
		graph[0].add(new Edge(0,1,1));
		graph[0].add(new Edge(0,2,2));
		
		//vertex-2
		graph[1].add(new Edge(1,0,1));
		graph[1].add(new Edge(1,2,3));
		graph[1].add(new Edge(1,3,4));
		
		//vertex-3
		graph[2].add(new Edge(2,0,2));
		graph[2].add(new Edge(2,1,3));
		graph[2].add(new Edge(2,4,5));
		
		//vertex-4
		graph[3].add(new Edge(3,1,4));
		graph[3].add(new Edge(3,4,6));
		
		//vertex-5
		graph[4].add(new Edge(4,3,6));
		graph[4].add(new Edge(4,2,5));
	}
	public static void print(ArrayList<Edge>[] graph) {
		for(int i=0;i<graph.length;i++) {
			for(int j=0;j<graph[i].size();j++) {
				Edge e=graph[i].get(j);
				System.out.print(e.src+"->"+e.dst+" ");
			}
			System.out.println();
		}
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		int v=5;		
		ArrayList<Edge>[] graph=new ArrayList[v];
		create(graph);
		print(graph);
	}
}

*********************************************************************************************************************************

// Breadth First Search Traversal

package imam.Graph;

import java.util.ArrayList;
import java.util.Queue;
import java.util.LinkedList;

import imam.Graph.GraphCreation.Edge;

public class BFS {
	
	public static void create(ArrayList<Edge>[] graph) {
		for(int i=0;i<graph.length;i++) {
			graph[i]=new ArrayList<>();
		}
		
		//vertex-1
		graph[0].add(new Edge(0,1,1));
		graph[0].add(new Edge(0,2,2));
		
		//vertex-2
		graph[1].add(new Edge(1,0,1));
		graph[1].add(new Edge(1,2,3));
		graph[1].add(new Edge(1,3,4));
		
		//vertex-3
		graph[2].add(new Edge(2,0,2));
		graph[2].add(new Edge(2,1,3));
		graph[2].add(new Edge(2,4,5));
		
		//vertex-4
		graph[3].add(new Edge(3,1,4));
		graph[3].add(new Edge(3,4,6));
		
		//vertex-5
		graph[4].add(new Edge(4,3,6));
		graph[4].add(new Edge(4,2,5));
	}
	
	public static void bfs(ArrayList<Edge>[] graph) {
		Queue<Integer> q=new LinkedList<>();
		boolean[] vis=new boolean[graph.length];
		q.add(0);
		while(!q.isEmpty()) {
			int num=q.remove();
			if(!vis[num]) {
				System.out.print(num+" ");
				vis[num]=true;
				for(int i=0;i<graph[num].size();i++) {
					Edge e=graph[num].get(i);
					q.add(e.dst);
				}
			}
		}
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int v=5;
		ArrayList<Edge>[] graph=new ArrayList[v];
		create(graph);
		bfs(graph);
	}
}

