// Graph Creation

package imam.Graph;

import java.util.ArrayList;

public class GraphCreation {
	static class Edge{
		int src;
		int dst;
		int wt;
		public Edge(int s,int d,int w) {
			this.src=s;
			this.dst=d;
			this.wt=w;
		}
	}
	public static void create(ArrayList<Edge>[] graph) {
		for(int i=0;i<graph.length;i++) {
			graph[i]=new ArrayList<>();
		}
		
		//vertex-1
		graph[0].add(new Edge(0,1,1));
		graph[0].add(new Edge(0,2,2));
		
		//vertex-2
		graph[1].add(new Edge(1,0,1));
		graph[1].add(new Edge(1,2,3));
		graph[1].add(new Edge(1,3,4));
		
		//vertex-3
		graph[2].add(new Edge(2,0,2));
		graph[2].add(new Edge(2,1,3));
		graph[2].add(new Edge(2,4,5));
		
		//vertex-4
		graph[3].add(new Edge(3,1,4));
		graph[3].add(new Edge(3,4,6));
		
		//vertex-5
		graph[4].add(new Edge(4,3,6));
		graph[4].add(new Edge(4,2,5));
	}
	public static void print(ArrayList<Edge>[] graph) {
		for(int i=0;i<graph.length;i++) {
			for(int j=0;j<graph[i].size();j++) {
				Edge e=graph[i].get(j);
				System.out.print(e.src+"->"+e.dst+" ");
			}
			System.out.println();
		}
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		int v=5;		
		ArrayList<Edge>[] graph=new ArrayList[v];
		create(graph);
		print(graph);
	}
}

*********************************************************************************************************************************

// Breadth First Search Traversal

package imam.Graph;

import java.util.ArrayList;
import java.util.Queue;
import java.util.LinkedList;

import imam.Graph.GraphCreation.Edge;

public class BFS {
	
	public static void create(ArrayList<Edge>[] graph) {
		for(int i=0;i<graph.length;i++) {
			graph[i]=new ArrayList<>();
		}
		
		//vertex-1
		graph[0].add(new Edge(0,1,1));
		graph[0].add(new Edge(0,2,2));
		
		//vertex-2
		graph[1].add(new Edge(1,0,1));
		graph[1].add(new Edge(1,2,3));
		graph[1].add(new Edge(1,3,4));
		
		//vertex-3
		graph[2].add(new Edge(2,0,2));
		graph[2].add(new Edge(2,1,3));
		graph[2].add(new Edge(2,4,5));
		
		//vertex-4
		graph[3].add(new Edge(3,1,4));
		graph[3].add(new Edge(3,4,6));
		
		//vertex-5
		graph[4].add(new Edge(4,3,6));
		graph[4].add(new Edge(4,2,5));
	}
	
	public static void bfs(ArrayList<Edge>[] graph) {
		Queue<Integer> q=new LinkedList<>();
		boolean[] vis=new boolean[graph.length];
		q.add(0);
		while(!q.isEmpty()) {
			int num=q.remove();
			if(!vis[num]) {
				System.out.print(num+" ");
				vis[num]=true;
				for(int i=0;i<graph[num].size();i++) {
					Edge e=graph[num].get(i);
					q.add(e.dst);
				}
			}
		}
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int v=5;
		ArrayList<Edge>[] graph=new ArrayList[v];
		create(graph);
		bfs(graph);
	}
}

************************************************************************************************************************************

//Depth First Search Traversal

package imam.Graph;

import java.util.ArrayList;

import imam.Graph.GraphCreation.Edge;

public class DFS {
	public static void create(ArrayList<Edge>[] graph) {
		for(int i=0;i<graph.length;i++) {
			graph[i]=new ArrayList<>();
		}
		
		//vertex-1
		graph[0].add(new Edge(0,1,1));
		graph[0].add(new Edge(0,2,2));
		
		//vertex-2
		graph[1].add(new Edge(1,0,1));
		graph[1].add(new Edge(1,2,3));
		graph[1].add(new Edge(1,3,4));
		
		//vertex-3
		graph[2].add(new Edge(2,0,2));
		graph[2].add(new Edge(2,1,3));
		graph[2].add(new Edge(2,4,5));
		
		//vertex-4
		graph[3].add(new Edge(3,1,4));
		graph[3].add(new Edge(3,4,6));
		
		//vertex-5
		graph[4].add(new Edge(4,3,6));
		graph[4].add(new Edge(4,2,5));
	}
	
	public static void dfs(ArrayList<Edge>[] graph,int curr , boolean[] vis) {
		System.out.print(curr+" ");
		vis[curr]=true;
		for(int i=0;i<graph[curr].size();i++) {
			Edge e=graph[curr].get(i);
			if(!vis[e.dst]) {
				dfs(graph,e.dst,vis);
			}
		}
		
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int v=5;
		ArrayList<Edge>[] graph=new ArrayList[v];
		create(graph);
		dfs(graph,0,new boolean[v]);
	}
}


// Graph Creation Using 2-D Array

package imam.Graph;
import java.util.Scanner;

public class GraphCreation {
	public static void creation() {
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter number of vertex");
		int v=sc.nextInt();
		System.out.println("Enter number of edge");
		int e=sc.nextInt();
		int[][] adjMatrix=new int[v][v];
		for(int i=0;i<e;i++) {
			int v1=sc.nextInt();
			int v2=sc.nextInt();
			adjMatrix[v1][v2]=1;
			adjMatrix[v2][v1]=1;
		}
		
		for(int i=0;i<adjMatrix.length;i++) {
			for(int j=0;j<adjMatrix.length;j++) {
				System.out.print(adjMatrix[i][j]+" ");
			}
			System.out.println();
		}
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		creation();

	}

}

****************************************************************************************************************

//Depth First Traversal Using 2-D Array

package imam.Graph;

import java.util.Scanner;

public class DFS {
	
	public static void dfsTraversal(int[][] adjMatrix,int currentVertex,boolean[] visited) {
		visited[currentVertex]=true;
		System.out.print(currentVertex+" ");
		for(int i=0;i<adjMatrix.length;i++) {
			if(adjMatrix[currentVertex][i]==1 && visited[i]==false) {
				dfsTraversal(adjMatrix,i,visited);
			}
		}
		
	}


	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter number of vertex");
		int v=sc.nextInt();
		System.out.println("Enter number of edge");
		int e=sc.nextInt();
		int[][] adjMatrix=new int[v][v];
		for(int i=0;i<e;i++) {
			int v1=sc.nextInt();
			int v2=sc.nextInt();
			adjMatrix[v1][v2]=1;
			adjMatrix[v2][v1]=1;
		}
		boolean[] visited=new boolean[adjMatrix.length];
		
		dfsTraversal(adjMatrix,0,visited);

	}

}


*******************************************************************************************************************

// Breadth First Traversal Using 2-D Array

package imam.Graph;
import java.util.Queue;
import java.util.LinkedList;
import java.util.Scanner;

public class BFS {
	public static void bfsTraversal(int[][] adjMatrix) {
		Queue<Integer> pendingVertex=new LinkedList<>();
		boolean[] visited=new boolean[adjMatrix.length];
		pendingVertex.add(0);
		visited[0]=true;
		while(!pendingVertex.isEmpty()) {
			int curr=pendingVertex.poll();
			System.out.print(curr+" ");
			for(int i=0;i<adjMatrix.length;i++) {
				if(adjMatrix[curr][i]==1 && !visited[i]) {
					pendingVertex.add(i);
					visited[i]=true;
				}
			}
			
		}
		
		
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter number of vertex");
		int v=sc.nextInt();
		System.out.println("Enter number of edge");
		int e=sc.nextInt();
		int[][] adjMatrix=new int[v][v];
		for(int i=0;i<e;i++) {
			int v1=sc.nextInt();
			int v2=sc.nextInt();
			adjMatrix[v1][v2]=1;
			adjMatrix[v2][v1]=1;
		}
		bfsTraversal(adjMatrix);

	}

}

*****************************************************************************************************************

// Depth First Traversal in Disconnected Graph

package imam.Graph;
import java.util.Scanner;

public class DFTraversalDisconnectGraph {
	
	public static void dfTraversal(int[][] adjMatrix,int curr,boolean[] visited) {
		System.out.print(curr+" ");
		visited[curr]=true;
		for(int i=0;i<adjMatrix.length;i++) {
			if(adjMatrix[curr][i]==1 && !visited[i]) {
				dfTraversal(adjMatrix,i,visited);
			}
		}
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter number of vertex");
		int v=sc.nextInt();
		System.out.println("Enter number of edge");
		int e=sc.nextInt();
		int[][] adjMatrix=new int[v][v];
		for(int i=0;i<e;i++) {
			int v1=sc.nextInt();
			int v2=sc.nextInt();
			adjMatrix[v1][v2]=1;
			adjMatrix[v2][v1]=1;
		}
		
		boolean[] visited=new boolean[v];
		
		for(int i=0;i<adjMatrix.length;i++) {
			if(!visited[i]) {
				dfTraversal(adjMatrix,i,visited);
			}
		}

	}
}

***************************************************************************************************************

// Beadth First Traversal in Disconnected Graph

package imam.Graph;
import java.util.Scanner;
import java.util.LinkedList;
import java.util.Queue;

public class BFTraversalDisconnectGraph {
	public static void bfTraversal(int[][] adjMatrix) {
		Queue<Integer> pendingVertex=new LinkedList<>();
		boolean[] visited=new boolean[adjMatrix.length];
		for(int i=0;i<adjMatrix.length;i++) {
			if(!visited[i]) {
				pendingVertex.add(i);
				visited[i]=true;
				while(!pendingVertex.isEmpty()) {
					int curr=pendingVertex.poll();
					System.out.print(curr+" ");
					for(int j=0;j<adjMatrix.length;j++) {
						if(adjMatrix[curr][j]==1 && !visited[j]) {
							pendingVertex.add(j);
							visited[j]=true;
						}
					}
				}
			}
		}
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter number of vertex");
		int v=sc.nextInt();
		System.out.println("Enter number of edge");
		int e=sc.nextInt();
		int[][] adjMatrix=new int[v][v];
		for(int i=0;i<e;i++) {
			int v1=sc.nextInt();
			int v2=sc.nextInt();
			adjMatrix[v1][v2]=1;
			adjMatrix[v2][v1]=1;
		}
		bfTraversal(adjMatrix);

	}
}

***********************************************************************************************************************

//Find the path between two vertex in given Graph

package imam.Graph;

import java.util.*;

public class GetPathInBFS {
	
	public static ArrayList<Integer> getPathDFS(int[][] adjMatrix,int src,int des){
		ArrayList<Integer> list=new ArrayList<>();
		HashMap<Integer,Integer> map=new HashMap<>();
		Queue<Integer> q=new LinkedList<>();
		boolean[] visited=new boolean[adjMatrix.length];
		q.add(src);
		visited[src]=true;
		map.put(src, -1);
		while(!q.isEmpty()) {
			int curr=q.poll();
			boolean flag=false;
			for(int i=0;i<adjMatrix.length;i++) {
				if(adjMatrix[curr][i]==1 && !visited[i]) {
					q.add(i);
					visited[i]=true;
					map.put(i,curr);
					if(i==des) {
						flag=true;
						break;
						
					}
				}
			}
			if(flag) {
				while(des!=-1) {
					list.add(des);
					des=map.get(des);
				}
			}
		}		
		
		return list;
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter number of vertex");
		int v=sc.nextInt();
		System.out.println("Enter number of edge");
		int e=sc.nextInt();
		int[][] adjMatrix=new int[v][v];
		for(int i=0;i<e;i++) {
			int v1=sc.nextInt();
			int v2=sc.nextInt();
			adjMatrix[v1][v2]=1;
			adjMatrix[v2][v1]=1;
		}
		System.out.println("Enter sounce and destination ");
		int src=sc.nextInt();
		int des=sc.nextInt();
		System.out.println(getPathDFS(adjMatrix,src,des));

	}

}

******************************************************************************************************************************

// Check Grapg is Connected or Not.

package imam.Graph;

import java.util.Scanner;

public class IsConnectedGraph {
	public static void dfsTraversal(int[][] adjMatrix,int currentVertex,boolean[] visited) {
		visited[currentVertex]=true;
		for(int i=0;i<adjMatrix.length;i++) {
			if(adjMatrix[currentVertex][i]==1 && visited[i]==false) {
				dfsTraversal(adjMatrix,i,visited);
			}
		}		
	}
	
	public static boolean isConnected(boolean[] visited) {
		
		for(int i=0;i<visited.length;i++) {
			if(visited[i]!=true) {
				return false;
			}
		}
		return true;
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter number of vertex");
		int v=sc.nextInt();
		System.out.println("Enter number of edge");
		int e=sc.nextInt();
		int[][] adjMatrix=new int[v][v];
		for(int i=0;i<e;i++) {
			int v1=sc.nextInt();
			int v2=sc.nextInt();
			adjMatrix[v1][v2]=1;
			adjMatrix[v2][v1]=1;
		}
		boolean[] visited=new boolean[adjMatrix.length];
		
		dfsTraversal(adjMatrix,0,visited);
		
		System.out.println(isConnected(visited));

	}
}
