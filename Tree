// Given the root of a perfect binary tree, reverse the node values at each odd level of the tree.
For example, suppose the node values at level 3 are [2,1,3,4,7,11,29,18], then it should become [18,29,11,7,4,3,1,2].
Return the root of the reversed tree.

class Solution {
    public TreeNode reverseOddLevels(TreeNode root) {
        if(root==null){
            return root;
        }
        Queue<TreeNode> q=new LinkedList<>();
        q.add(root);
        int level=0;
        while(!q.isEmpty()){
            int size=q.size();
            while(size-->0){
                TreeNode temp=q.poll();
                if(temp.left!=null) q.add(temp.left);
                if(temp.right!=null)q.add(temp.right);
            }
            level++;
            int i=0;
            if((level%2==1) && !q.isEmpty()){
                int[] arr=new int[q.size()];
                for(TreeNode n:q){
                    arr[i]=n.val;
                    i++;
                }
                i=arr.length-1;
                for(TreeNode n:q){
                    n.val=arr[i];
                    i--;
                }
            }
        }
        return root;        
    }
}
